# –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —Å –ú–æ—Å–±–∏—Ä–∂–∏

import pandas as pd
import aiohttp
from datetime import datetime, timedelta
import aiomoex
import asyncio

async def fetch_moex_data(ticker, timeframe='D', days=1825):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–≤–µ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ú–æ—Å–∫–æ–≤—Å–∫–æ–π –±–∏—Ä–∂–∏ —á–µ—Ä–µ–∑ aiomoex.
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –∏ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—ã
    end_date = datetime.now()
    start_date = end_date - timedelta(days=days)

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É YYYY-MM-DD
    start_str = start_date.strftime('%Y-%m-%d')
    end_str = end_date.strftime('%Y-%m-%d')

    # –ú–∞–ø–ø–∏–Ω–≥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    interval_map = {'D': 24, 'W': 7, 'H': 60, 'M': 31}
    interval = interval_map.get(timeframe, 24)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–Ω–µ–≤–Ω—ã–µ —Å–≤–µ—á–∏

    print(f"üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker} —Å {start_str} –ø–æ {end_str} (—Ç–∞–π–º—Ñ—Ä–µ–π–º: {timeframe})")

    async with aiohttp.ClientSession() as session:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = await aiomoex.get_market_candles(
            session,
            security=ticker,
            interval=interval,
            start=start_str,
            end=end_str
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if not data:
        raise ValueError(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker} –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π")

    # –°–æ–∑–¥–∞–µ–º DataFrame
    df = pd.DataFrame(data)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
    column_mapping = {
        'begin': 'Date',
        'open': 'Open',
        'high': 'High',
        'low': 'Low',
        'close': 'Close',
        'value': 'Volume' # –µ—Å–ª–∏ volume, —Ç–æ –æ–±—ä—ë–º —Ç–æ—Ä–≥–æ–≤ –≤ —à—Ç—É–∫–∞—Ö
    }
    df = df.rename(columns=column_mapping)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ datetime –∏ —Å—Ç–∞–≤–∏–º –∏–Ω–¥–µ–∫—Å
    df['Date'] = pd.to_datetime(df['Date'])
    df.set_index('Date', inplace=True)

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    df = df[['Open', 'High', 'Low', 'Close', 'Volume']]

    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å–≤–µ—á–µ–π –¥–ª—è {ticker}")

    return df, start_str, end_str  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º start_str –∏ end_str


# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è fetch_moex_data

async def test_fetch_moex_data_output_simple(ticker='SBER', timeframe='D', days=30):
    try:
        df, start_str, end_str = await fetch_moex_data(ticker, timeframe, days)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è DataFrame
        if not isinstance(df, pd.DataFrame):
            print("‚ùå –û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ pandas DataFrame")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ DataFrame –Ω–µ –ø—É—Å—Ç–æ–π
        if df.empty:
            print("‚ùå –û—à–∏–±–∫–∞: DataFrame –ø—É—Å—Ç–æ–π")
            return False

        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫
        print(f"\n–ü–µ—Ä–≤—ã–µ 15 —Å—Ç—Ä–æ–∫ DataFrame –¥–ª—è {ticker}:")
        print(df.head(15))

        # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å—Ç—Ä–æ–∫
        print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 —Å—Ç—Ä–æ–∫ DataFrame –¥–ª—è {ticker}:")
        print(df.tail(15))

        # –í—ã–≤–æ–¥–∏–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        print(f"\n–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö DataFrame –¥–ª—è {ticker}:")
        print(df.dtypes)
        
        print(f"\n‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è {ticker} —Å {start_str} –ø–æ {end_str}")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞ –¥–ª—è {ticker}: {e}")
        return False

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if __name__ == "__main__":
    asyncio.run(test_fetch_moex_data_output_simple())