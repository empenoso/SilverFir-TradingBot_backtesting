from backtesting import Strategy
from backtesting.lib import crossover
import talib
import pandas as pd
import numpy as np
from backtesting.lib import resample_apply

class LongOnlyPMAMultiTimeframeTrailingStop(Strategy):

    # –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    print("üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
    print("1Ô∏è‚É£ –í—Ö–æ–¥ –≤ –¥–ª–∏–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, –∫–æ–≥–¥–∞:")
    print("   ‚úì –ù–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã—à–µ 50-–Ω–µ–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π (PMA)")
    print("   ‚úì –î–Ω–µ–≤–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã—à–µ 50-–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π (PMA)")
    print("   ‚úì 20-–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è –≤—ã—à–µ 50-–¥–Ω–µ–≤–Ω–æ–π")
    print("3Ô∏è‚É£ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —Å–∫–æ–ª—å–∑—è—â–µ–º—É —Å—Ç–æ–ø—É –≤ 5% –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è.\n")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    d_ma_short = 20
    d_ma_long = 50
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    w_ma_long = 50
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ç–æ–ø–∞
    trail_percent = 0.05  # 5% —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
    
    def init(self):
        # –§—É–Ω–∫—Ü–∏–∏ PMA, –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑ –∫–ª–∞—Å—Å–∞ PMA
        def calc_sma(data, length):
            """–ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è"""
            return pd.Series(data).rolling(length).mean().values
        
        def calc_slope(data, length):
            """–†–∞—Å—á–µ—Ç –Ω–∞–∫–ª–æ–Ω–∞ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏"""
            def linear_regression_slope(samples):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º polyfit –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–∫–ª–æ–Ω–∞ (–ø–æ–ª–∏–Ω–æ–º 1–π —Å—Ç–µ–ø–µ–Ω–∏)
                if len(samples) < 2:
                    return 0
                m, b = np.polyfit(np.arange(len(samples)), np.array(samples), 1)
                return m
                
            result = np.full_like(data, np.nan, dtype=float)
            for i in range(length-1, len(data)):
                samples = data[i-length+1:i+1]
                result[i] = linear_regression_slope(samples)
            return result
        
        # –î–Ω–µ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã PMA 
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è d_ma20
        d_sma20 = self.I(lambda x: calc_sma(x, self.d_ma_short), self.data.Close, name=f'SMA{self.d_ma_short}', plot=False)
        d_slope20 = self.I(lambda x: calc_slope(x, self.d_ma_short), self.data.Close, name=f'Slope{self.d_ma_short}', plot=False)
        self.d_pma20 = self.I(lambda: d_sma20 + d_slope20 * self.d_ma_short / 2, name=f'PMA{self.d_ma_short}', overlay=True, color='green') # üü¢ –ó–µ–ª–µ–Ω–∞—è PMA20

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è d_ma50
        d_sma50 = self.I(lambda x: calc_sma(x, self.d_ma_long), self.data.Close, name=f'SMA{self.d_ma_long}', plot=False)
        d_slope50 = self.I(lambda x: calc_slope(x, self.d_ma_long), self.data.Close, name=f'Slope{self.d_ma_long}', plot=False)
        self.d_pma50 = self.I(lambda: d_sma50 + d_slope50 * self.d_ma_long / 2, name=f'PMA{self.d_ma_long}', overlay=True, color='blue') # üîµ –°–∏–Ω—è—è PMA50

        # –ù–µ–¥–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º resample_apply –¥–ª—è —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–∞ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–µ–¥–µ–ª—å–Ω—ã–µ
        # 'W-SUN' –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –±–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è PMA –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
        def weekly_pma(x, length):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Series –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            x_series = pd.Series(x)
            # –ü–æ–ª—É—á–∞–µ–º SMA –∏ Slope
            sma = x_series.rolling(length).mean().values
            
            # –†–∞—Å—á–µ—Ç –Ω–∞–∫–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
            slope = np.full_like(sma, np.nan, dtype=float)
            for i in range(length-1, len(x)):
                if i < length:
                    continue
                samples = x[i-length+1:i+1]
                # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∫–ª–æ–Ω–∞
                if len(samples) >= 2:
                    m, b = np.polyfit(np.arange(len(samples)), np.array(samples), 1)
                    slope[i] = m
            
            # –†–∞—Å—á–µ—Ç PMA
            pma = sma + slope * length / 2
            return pma
        
        # –ù–µ–¥–µ–ª—å–Ω–∞—è PMA-50
        self.w_pma50 = resample_apply('W-SUN', weekly_pma, self.data.Close, self.w_ma_long, name=f'Weekly PMA{self.w_ma_long}', plot=True)
        
        # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–µ—Ä–∏–æ–¥–æ–º 1
        self.w_close = resample_apply('W-SUN', lambda x, _: pd.Series(x).rolling(1).mean(), self.data.Close, 1, name=f'Weekly Close', plot=True, color='black')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø–∞ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
        self.trailing_stops = self.I(lambda: np.full_like(self.data.Close, np.nan), 
                                   overlay=True, name='–¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø', color='red')
        
        # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
        self.entry_prices = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω –≤—Ö–æ–¥–∞ –ø–æ ID –ø–æ–∑–∏—Ü–∏–∏
        self.max_close_prices = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è
      
    def next(self):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        current_price = self.data.Close[-1]
        current_d_pma20 = self.d_pma20[-1]
        current_d_pma50 = self.d_pma50[-1]
        current_date = self.data.index[-1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        current_w_pma50 = self.w_pma50[-1]
        current_w_close = self.w_close[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN (–≤ –Ω–∞—á–∞–ª–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –¥–∞–Ω–Ω—ã—Ö)
        if (pd.isna(current_w_pma50) or pd.isna(current_w_close) or
            pd.isna(current_d_pma20) or pd.isna(current_d_pma50)):
            return

        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞)
        w_close_above_pma50 = current_w_close > current_w_pma50  # –ù–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤—ã—à–µ PMA-50
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (—Å–∏–≥–Ω–∞–ª –≤—Ö–æ–¥–∞)
        d_price_above_pma50 = current_price > current_d_pma50  # –¶–µ–Ω–∞ –≤—ã—à–µ 50-–¥–Ω–µ–≤–Ω–æ–π PMA
        d_pma20_above_pma50 = current_d_pma20 > current_d_pma50  # 20-–¥–Ω–µ–≤–Ω–∞—è PMA –≤—ã—à–µ 50-–¥–Ω–µ–≤–Ω–æ–π PMA
        
        # –î–ª—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø
        if self.position.is_long:
            position_id = id(self.position)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è
            if position_id not in self.entry_prices:
                self.entry_prices[position_id] = current_price
                self.max_close_prices[position_id] = current_price
            
            entry_price = self.entry_prices[position_id]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è, –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã—à–µ
            if current_price > self.max_close_prices[position_id]:
                self.max_close_prices[position_id] = current_price
            
            max_close = self.max_close_prices[position_id]
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –∫–∞–∫ % –Ω–∏–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è
            trail_price = max_close * (1 - self.trail_percent)
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
            self.trailing_stops[-1] = trail_price
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –ø—Ä–æ–¥–∞–∂–∏: –µ—Å–ª–∏ —Ç–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø—É—Å—Ç–∏–ª–∞—Å—å –Ω–∏–∂–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
            if current_price <= trail_price:
                # –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏
                profit_pct = (current_price - entry_price) / entry_price * 100
                
                # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–∂–µ
                print(f"\nüî¥ –ü–†–û–î–ê–ñ–ê –ü–û –°–ö–û–õ–¨–ó–Ø–©–ï–ú–£ –°–¢–û–ü–£ ({current_date.strftime('%Y-%m-%d')})")
                print(f"   –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: {entry_price:.2f} —Ä—É–±.")
                print(f"   –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {current_price:.2f} —Ä—É–±.")
                print(f"   –ú–∞–∫—Å. —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: {max_close:.2f} —Ä—É–±.")
                print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {profit_pct:.2f}%")
                print(f"   –°–∫–æ–ª—å–∑—è—â–∏–π —Å—Ç–æ–ø: {trail_price:.2f} —Ä—É–±. ({self.trail_percent*100:.1f}% –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞)")
                print(f"   –ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞: –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è {current_price:.2f} <= –°–∫–æ–ª—å–∑—è—â–∏–π —Å—Ç–æ–ø {trail_price:.2f}")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
                self.position.close()
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–æ–∑–∏—Ü–∏–∏
                if position_id in self.entry_prices:
                    del self.entry_prices[position_id]
                if position_id in self.max_close_prices:
                    del self.max_close_prices[position_id]
                
                # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
                self.trailing_stops[-1] = np.nan
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        elif not self.position.is_long and (w_close_above_pma50 and d_price_above_pma50 and d_pma20_above_pma50):
            
            print(f"\nüü¢ –ü–û–ö–£–ü–ö–ê ({current_date.strftime('%Y-%m-%d')})")
            print(f"   –¶–µ–Ω–∞: {current_price:.2f} —Ä—É–±.")
            print(f"   –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ (–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º):")
            print(f"      ‚úì –ù–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {current_w_close:.2f} > –ù–µ–¥–µ–ª—å–Ω–∞—è PMA50 {current_w_pma50:.2f}")
            print(f"   –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ (–¥–Ω–µ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º):")
            print(f"      ‚úì –¶–µ–Ω–∞ {current_price:.2f} > PMA50 {current_d_pma50:.2f}")
            print(f"      ‚úì PMA10 {current_d_pma20:.2f} > PMA50 {current_d_pma50:.2f}")
            
            # –í—Ö–æ–¥–∏–º –≤ –ø–æ–∑–∏—Ü–∏—é —Å –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–º —Å—Ç–æ–ø-–ª–æ—Å—Å–æ–º
            self.buy()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ
            self.trailing_stops[-1] = current_price * (1 - self.trail_percent)