# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

from backtesting import Strategy
from backtesting.lib import crossover
import talib
import pandas as pd
import numpy as np
from backtesting.lib import resample_apply

class LongOnlyPMAMultiTimeframeATRTrailingStop(Strategy):

    # –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    print("üìù –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
    print("1Ô∏è‚É£ –í—Ö–æ–¥ –≤ –¥–ª–∏–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é, –∫–æ–≥–¥–∞:")
    print("   ‚úì –ù–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã—à–µ 50-–Ω–µ–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π (PMA)")
    print("   ‚úì –î–Ω–µ–≤–Ω–∞—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—ã—à–µ 50-–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω–æ–π —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π (PMA)")
    print("   ‚úì 10-–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–µ–∫—Ü–∏–æ–Ω–Ω–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è –≤—ã—à–µ 50-–¥–Ω–µ–≤–Ω–æ–π")
    print("2Ô∏è‚É£ –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 10% –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
    print("3Ô∏è‚É£ –í—ã—Ö–æ–¥ –∏–∑ –ø–æ–∑–∏—Ü–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –ø–æ —Å–∫–æ–ª—å–∑—è—â–µ–º—É —Å—Ç–æ–ø—É –Ω–∞ –æ—Å–Ω–æ–≤–µ ATR.\n")

    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    d_ma_short = 10
    d_ma_long = 50
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
    w_ma_long = 50
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ (–ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π)
    stop_loss_pct = 0.1

    # –ü–∞—Ä–∞–º–µ—Ç—Ä ATR –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ç–æ–ø–∞
    atr_period = 14  # –ü–µ—Ä–∏–æ–¥ ATR
    atr_multiplier = 2 # –ú–Ω–æ–∂–∏—Ç–µ–ª—å ATR –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ç–æ–ø–∞
    
    def init(self):
        # –§—É–Ω–∫—Ü–∏–∏ PMA, –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ –∏–∑ –∫–ª–∞—Å—Å–∞ PMA
        def calc_sma(data, length):
            """–ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è"""
            return pd.Series(data).rolling(length).mean().values
        
        def calc_slope(data, length):
            """–†–∞—Å—á–µ—Ç –Ω–∞–∫–ª–æ–Ω–∞ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏"""
            def linear_regression_slope(samples):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º polyfit –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞–∫–ª–æ–Ω–∞ (–ø–æ–ª–∏–Ω–æ–º 1–π —Å—Ç–µ–ø–µ–Ω–∏)
                if len(samples) < 2:
                    return 0
                m, b = np.polyfit(np.arange(len(samples)), np.array(samples), 1)
                return m
                
            result = np.full_like(data, np.nan, dtype=float)
            for i in range(length-1, len(data)):
                samples = data[i-length+1:i+1]
                result[i] = linear_regression_slope(samples)
            return result
        
        def calc_atr(high, low, close, period=14):
            """–†–∞—Å—á–µ—Ç ATR —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TA-Lib"""
            return talib.ATR(high, low, close, timeperiod=period)
            
        # def calc_pma_prediction(pma, slope, length):
        #     """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ PMA –¥–ª—è –µ—â–µ –±–æ–ª—å—à–µ–≥–æ —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–∞–ø–∞–∑–¥—ã–≤–∞–Ω–∏—è"""
        #     # Predict = PMA + 0.5*(Slope - Slope[2])*Length
        #     predict = np.full_like(pma, np.nan, dtype=float)
        #     for i in range(2, len(pma)):
        #         predict[i] = pma[i] + (slope[i] - slope[i-2]) * length / 2
        #     return predict
        
        # –î–Ω–µ–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã PMA 
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è d_ma10
        d_sma10 = self.I(lambda x: calc_sma(x, self.d_ma_short), self.data.Close, name=f'SMA{self.d_ma_short}', plot=False)
        d_slope10 = self.I(lambda x: calc_slope(x, self.d_ma_short), self.data.Close, name=f'Slope{self.d_ma_short}', plot=False)
        self.d_pma10 = self.I(lambda: d_sma10 + d_slope10 * self.d_ma_short / 2, name=f'PMA{self.d_ma_short}', overlay=True, color='green') # üü¢ –ó–µ–ª–µ–Ω–∞—è PMA10

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è d_ma50
        d_sma50 = self.I(lambda x: calc_sma(x, self.d_ma_long), self.data.Close, name=f'SMA{self.d_ma_long}', plot=False)
        d_slope50 = self.I(lambda x: calc_slope(x, self.d_ma_long), self.data.Close, name=f'Slope{self.d_ma_long}', plot=False)
        self.d_pma50 = self.I(lambda: d_sma50 + d_slope50 * self.d_ma_long / 2, name=f'PMA{self.d_ma_long}', overlay=True, color='blue') # üîµ –°–∏–Ω—è—è PMA50

        # –ù–µ–¥–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º resample_apply –¥–ª—è —Ä–µ—Å–µ–º–ø–ª–∏–Ω–≥–∞ –¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–µ–¥–µ–ª—å–Ω—ã–µ
        # 'W-SUN' –æ–∑–Ω–∞—á–∞–µ—Ç –Ω–µ–¥–µ–ª—å–Ω—ã–π –±–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è PMA –≤ –Ω–µ–¥–µ–ª—å–Ω–æ–º —Ç–∞–π–º—Ñ—Ä–µ–π–º–µ
        def weekly_pma(x, length):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Series –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
            x_series = pd.Series(x)
            # –ü–æ–ª—É—á–∞–µ–º SMA –∏ Slope
            sma = x_series.rolling(length).mean().values
            
            # –†–∞—Å—á–µ—Ç –Ω–∞–∫–ª–æ–Ω–∞ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ
            slope = np.full_like(sma, np.nan, dtype=float)
            for i in range(length-1, len(x)):
                if i < length:
                    continue
                samples = x[i-length+1:i+1]
                # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∫–ª–æ–Ω–∞
                if len(samples) >= 2:
                    m, b = np.polyfit(np.arange(len(samples)), np.array(samples), 1)
                    slope[i] = m
            
            # –†–∞—Å—á–µ—Ç PMA
            pma = sma + slope * length / 2
            return pma
        
        # –ù–µ–¥–µ–ª—å–Ω–∞—è PMA-50
        self.w_pma50 = resample_apply('W-SUN', weekly_pma, self.data.Close, self.w_ma_long, name=f'Weekly PMA{self.w_ma_long}', plot=True)
        
        # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∑–∞–∫—Ä—ã—Ç–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–µ—Ä–∏–æ–¥–æ–º 1
        self.w_close = resample_apply('W-SUN', lambda x, _: pd.Series(x).rolling(1).mean(), self.data.Close, 1, name=f'Weekly Close', plot=True, color='black')
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä ATR –¥–ª—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ç–æ–ø–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ
        self.atr = self.I(calc_atr, self.data.High, self.data.Low, self.data.Close, period=self.atr_period, name=f'ATR({self.atr_period})', overlay=False) # üìâ ATR –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –æ–∫–Ω–µ

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ç–æ–ø–∞
        self.trailing_stop = None
        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã —Å –º–æ–º–µ–Ω—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
        self.highest_price_since_entry = None
      
    def next(self):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        current_price = self.data.Close[-1]
        current_d_pma10 = self.d_pma10[-1]
        current_d_pma50 = self.d_pma50[-1]
        current_atr = self.atr[-1] # –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ATR
        current_date = self.data.index[-1]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞
        current_w_pma50 = self.w_pma50[-1]
        current_w_close = self.w_close[-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN (–≤ –Ω–∞—á–∞–ª–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –¥–∞–Ω–Ω—ã—Ö)
        if (pd.isna(current_w_pma50) or pd.isna(current_w_close) or
            pd.isna(current_d_pma10) or pd.isna(current_d_pma50) or pd.isna(current_atr)): # ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º ATR –Ω–∞ NaN
            return


        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞)
        w_close_above_pma50 = current_w_close > current_w_pma50  # –ù–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤—ã—à–µ PMA-50
        
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è –¥–Ω–µ–≤–Ω–æ–≥–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º–∞ (—Å–∏–≥–Ω–∞–ª –≤—Ö–æ–¥–∞)
        d_price_above_pma50 = current_price > current_d_pma50  # –¶–µ–Ω–∞ –≤—ã—à–µ 50-–¥–Ω–µ–≤–Ω–æ–π PMA
        d_pma10_above_pma50 = current_d_pma10 > current_d_pma50  # 10-–¥–Ω–µ–≤–Ω–∞—è PMA –≤—ã—à–µ 50-–¥–Ω–µ–≤–Ω–æ–π PMA
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞ - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
        if not self.position and (w_close_above_pma50 and d_price_above_pma50 and d_pma10_above_pma50):
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å
            stop_loss = current_price * (1 - self.stop_loss_pct)
            
            print(f"\nüü¢ –ü–û–ö–£–ü–ö–ê ({current_date.strftime('%Y-%m-%d')})")
            print(f"   –¶–µ–Ω–∞: {current_price:.2f} —Ä—É–±.")
            print(f"   –°—Ç–æ–ø-–ª–æ—Å—Å: {stop_loss:.2f} —Ä—É–±. (—Ä–∏—Å–∫: {self.stop_loss_pct*100:.1f}%)")
            print(f"   –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ (–Ω–µ–¥–µ–ª—å–Ω—ã–π —Ç–∞–π–º—Ñ—Ä–µ–π–º):")
            print(f"      ‚úì –ù–µ–¥–µ–ª—å–Ω–∞—è —Ü–µ–Ω–∞ {current_w_close:.2f} > –ù–µ–¥–µ–ª—å–Ω–∞—è PMA50 {current_w_pma50:.2f}")
            print(f"   –£—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞ (–¥–Ω–µ–≤–Ω–æ–π —Ç–∞–π–º—Ñ—Ä–µ–π–º):")
            print(f"      ‚úì –¶–µ–Ω–∞ {current_price:.2f} > PMA50 {current_d_pma50:.2f}")
            print(f"      ‚úì PMA10 {current_d_pma10:.2f} > PMA50 {current_d_pma50:.2f}")
            
            # –í—Ö–æ–¥–∏–º –≤ –ø–æ–∑–∏—Ü–∏—é
            self.buy(sl=stop_loss)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–π —Å—Ç–æ–ø –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –ø–æ–∑–∏—Ü–∏—é
            self.trailing_stop = current_price - self.atr_multiplier * current_atr # üìê –ù–∞—á–∞–ª—å–Ω—ã–π —Å–∫–æ–ª—å–∑—è—â–∏–π —Å—Ç–æ–ø –Ω–∏–∂–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞
            self.highest_price_since_entry = current_price # üöÄ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—Ö–æ–¥–∞
        
        # –õ–æ–≥–∏–∫–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ç–æ–ø–∞, –µ—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞
        elif self.position:
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å –º–æ–º–µ–Ω—Ç–∞ –≤—Ö–æ–¥–∞
            self.highest_price_since_entry = max(self.highest_price_since_entry, current_price) # üìà –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º—É–º —Ü–µ–Ω—ã

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ç–æ–ø–∞
            new_trailing_stop = self.highest_price_since_entry - self.atr_multiplier * current_atr # üìê –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ç–æ–ø–∞

            # –ü–æ–¥–Ω–∏–º–∞–µ–º —Å–∫–æ–ª—å–∑—è—â–∏–π —Å—Ç–æ–ø, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ —Ç–µ–∫—É—â–µ–≥–æ
            if new_trailing_stop > self.trailing_stop:
                self.trailing_stop = new_trailing_stop # ‚¨ÜÔ∏è –ü–æ–¥–Ω–∏–º–∞–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –≤—ã—Ö–æ–¥–∞ –ø–æ —Å–∫–æ–ª—å–∑—è—â–µ–º—É —Å—Ç–æ–ø—É
            if current_price <= self.trailing_stop: # üìâ –¶–µ–Ω–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ç–æ–ø–∞
                print(f"\nüî¥ –ü–†–û–î–ê–ñ–ê –ü–û –°–ö–û–õ–¨–ó–Ø–©–ï–ú–£ –°–¢–û–ü–£ ({current_date.strftime('%Y-%m-%d')})") # üõë –ü—Ä–æ–¥–∞–∂–∞ –ø–æ —Å—Ç–æ–ø—É
                print(f"   –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: {current_price:.2f} —Ä—É–±.") # üí∞ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞
                print(f"   –°–∫–æ–ª—å–∑—è—â–∏–π —Å—Ç–æ–ø: {self.trailing_stop:.2f} —Ä—É–±.") # üìâ –£—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø–∞
                print(f"   –ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞: –¶–µ–Ω–∞ {current_price:.2f} <= –°–∫–æ–ª—å–∑—è—â–∏–π —Å—Ç–æ–ø {self.trailing_stop:.2f} (ATR({self.atr_period})*{self.atr_multiplier})") # ‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞ –≤—ã—Ö–æ–¥–∞

                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —Å–∫–æ–ª—å–∑—è—â–µ–º—É —Å—Ç–æ–ø—É
                self.position.close()